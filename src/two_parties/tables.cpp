#include<stdlib.h>
#include "tables.h"
#include "protocol/s_fixnum.h"
#include "../util.h"

/**
  The table to compute exp function
 */
SFloat **exp_table;
/**
  The table to compute log function
 */
mpz_t *logtable;

/**
  Generate log table.
  @param logtable the log table
  @param domain the domain this operation is performed on
  @param client_type The type of this party:
  - ALICE (1)
  - BOB (2)
 */
void gen_table(mpz_t logtable[], mpz_t domain, int client_type)
{
  mpz_t n1;
  int i, n;
  int bits = binary_size(domain);

  mpz_init(n1);

  mpz_set_ui(logtable[0], 0);
  mpz_set_ui(logtable[1], 0);

  if(client_type == ALICE)
    mpz_set_ui(n1, 1);
  if(client_type == BOB)
    mpz_set_ui(n1, 0);

  if(bits < 8) n = mpz_get_ui(domain);
  else 		 n = 255;
  for(i = 2; i <= n; i++) 
    s_plus(n1, logtable[i/2], domain, logtable[i]);

  mpz_set_si(logtable[0], -1);
  mpz_mod(logtable[0], logtable[0], domain);

  mpz_clear(n1);
}
/**
  Initialize the exp table
  @param client_type The type of this party:
  - ALICE (1)
  - BOB (2)
 */
void init_ExpTable(int client_type)
{
  unsigned long int a_table[51][2][3]={{{0,10101125671970144,557},{0,28745005124081112,1247}},{{1,16050272492905479,930},{0,4940135891715477,383}},{{0,26968268757705673,216},{1,34621414252309752,1400}},{{0,34680947277560899,569},{1,28098958348664017,1838}},{{1,32801905310038553,1714},{1,2031134895860944,2021}},{{0,34117471310577094,560},{0,4939708661947980,1044}},{{1,22408743711497320,942},{1,7325997333976915,342}},{{0,4992328976501640,801},{0,1995095445078089,1045}},{{1,29026365290823705,1148},{1,8807312018520588,2001}},{{1,20323032019521235,1693},{1,6697158861028484,651}},{{1,15352893565471424,1024},{1,8708906381556692,1732}},{{1,21180227753460398,635},{1,22258600175854230,804}},{{0,157708646994558,322},{1,16631760104035629,1592}},{{1,29281321884026882,1784},{0,31998874636746387,2034}},{{1,3449811560632499,1432},{0,59281599121332,1269}},{{0,21301339366860008,525},{1,27064234196710583,1332}},{{0,24010427380894096,189},{0,5031992729733866,1350}},{{0,1766837199227018,1393},{0,18640380890749189,821}},{{1,34873150456117496,1242},{0,6101037968651929,1631}},{{1,14361769749555900,539},{1,13410385856561987,1196}},{{1,5029775778224351,1264},{1,19072698204580559,440}},{{1,6148840721721859,2017},{1,26839324458667336,573}},{{1,3084358498798443,843},{1,387026123725300,1986}},{{0,24766885636277319,1975},{0,2422788273446378,740}},{{1,12613875245436784,1319},{0,25639947317898406,61}},{{1,19512674914807852,616},{1,8353472018778325,1351}},{{1,31361594030492965,224},{1,7354097434618316,1537}},{{0,18851288410838427,563},{1,24738429570708441,32}},{{1,12220400562326072,1906},{0,26345712638136575,1044}},{{0,10165865709875643,1980},{0,33584816839858410,1171}},{{1,5724144382469743,1988},{0,19735937638489513,253}},{{1,24058853194209964,1030},{0,6012504434824758,72}},{{0,31468330651550515,874},{1,5134810213759810,564}},{{0,28859621138276847,391},{0,20984949269685014,227}},{{1,26924274418145076,1928},{0,2081894124954667,1325}},{{1,11167712737978992,1644},{1,7445359027677784,1611}},{{1,113175062768330,1372},{0,35240415338591368,938}},{{0,33301282892793344,1535},{1,29036308214295423,1443}},{{0,33695570927175641,206},{1,5760794134901224,1012}},{{0,8505847255726827,1219},{0,27010495634907053,776}},{{1,12717652977735752,1309},{1,7553434675326171,59}},{{0,21635396500314363,1950},{1,6379939525491676,439}},{{1,730102058156888,333},{0,10768598046973977,1564}},{{0,27962772098958486,1062},{0,14761212301860174,1312}},{{1,21823839632201738,1313},{0,13743802329150405,1792}},{{0,14418837073479293,1560},{0,35196438392533268,1115}},{{0,17242439117053478,1295},{1,22379541492803261,1039}},{{0,35454826764523213,1852},{0,26156891559791509,442}},{{1,28831990870319870,1229},{0,360170522742139,965}},{{1,1918666928419286,1545},{1,10756617098929001,381}},{{1,3466859823595904,1169},{0,6189075972822938,1323}}};
  unsigned long int b_table[51][2][3]={{{0,30431270974364320,467},{0,13527106663048215,1823}},{{1,26733923967114233,93},{0,2364074147435191,638}},{{0,14690027795471415,807},{1,9446976483044650,1668}},{{0,6414399322194877,454},{1,16417000838182421,1229}},{{1,8011966313006567,1357},{1,6705793879242198,1045}},{{0,6555662824112698,463},{0,3929618090382516,2021}},{{1,18194021679014808,81},{1,1611557700398225,674}},{{0,35575252041921656,222},{0,6977101622437696,2018}},{{1,11523623541555175,1923},{1,182340729360820,1061}},{{1,20218160719835437,1378},{1,2301255737185378,362}},{{1,25183901127374144,2047},{1,293897687889212,1328}},{{1,19354367916129618,388},{1,22775197790161019,207}},{{0,4346990492003714,701},{1,28403136836965764,1466}},{{1,11251624518121470,1287},{0,13036571925879832,1023}},{{1,1054062944644941,1639},{0,8947642788897015,1787}},{{0,19231194718427928,498},{1,17971624640837044,1723}},{{0,16522037984917104,834},{0,3975137806229433,1704}},{{0,2736796787881846,1678},{0,26395581023392165,184}},{{1,5659263370086152,1829},{0,2906144106263570,1421}},{{1,26170635486713156,484},{1,31625601827219304,1855}},{{1,35502625163077409,1807},{1,25963293774159836,562}},{{1,34383558072096253,1054},{1,18196669667554659,428}},{{1,1419242202313877,180},{1,8620172057274039,1062}},{{0,15765511546928057,1096},{0,6584410444423745,259}},{{1,27918521669333136,1752},{0,19396048687371109,937}},{{1,21019721865744340,407},{1,653727101744942,1694}},{{1,9170802682950363,799},{1,1653101753013813,1507}},{{0,21681108269050469,460},{1,20297566669442087,963}},{{1,28311996100785608,1165},{0,18690283618791169,1998}},{{0,30366530944847429,1091},{0,11451179425457942,1870}},{{1,34808252268059025,1083},{0,25300058631021143,739}},{{1,16473543454221652,2041},{0,2994694817819082,919}},{{0,9064065995832525,149},{1,3872389039932606,426}},{{0,11672775508581905,632},{0,24051047003495658,762}},{{1,13608122228451532,1143},{0,6925305129524181,1711}},{{1,29364683908486544,1427},{1,1561840226932136,1424}},{{1,4390424564667702,1699},{0,9795580935048056,48}},{{0,7231113753573888,1536},{1,15999688059376769,1590}},{{0,6836825719175207,817},{1,3246405119823384,2020}},{{0,32026549390615829,1852},{0,18025500638789715,207}},{{1,27814743668602808,1762},{1,1453764579410725,923}},{{0,18897000146022149,1121},{1,2627259729247268,542}},{{1,3773497569214632,690},{0,34267398226729959,1464}},{{0,12569624547376490,2009},{0,30274783971844274,1715}},{{1,18708557014132982,1758},{0,31292193944554299,1234}},{{0,26113559572855299,1511},{0,9839557881171564,1910}},{{0,23289957529281050,1776},{1,22656454780901635,1985}},{{0,5077569881811283,1219},{0,18879104713913419,533}},{{1,11700405776014610,1842},{0,8647028731998837,9}},{{1,2584932698951218,1526},{1,34279379174775951,592}},{{1,1036739803774596,1902},{0,2818123281918050,1697}}};
  int dim=51;
  int i=0;
  int j=0;

  exp_table = new SFloat*[dim];
  for(i = 0; i < dim; i++)
    exp_table[i] = new SFloat[2];

  unsigned long int (*table)[51][2][3];
  if(client_type == ALICE)
    table=&a_table;
  if(client_type == BOB)
    table=&b_table;

  for(i = 0; i < dim; i++)
  {
    for(j = 0; j < 2; j++)
    {
      unsigned long int *t=(*table)[i][j];
      exp_table[i][j].set_ui(t[0], t[2], t[1]);
    }
  }
  //printf("successfully init exp_table\n");
}

/**
  Free the exp table
 */
void free_ExpTable()
{
  int i=0;
  int dim=51;
  for(i = 0; i < dim; i++)
    delete[] exp_table[i];
  delete[] exp_table;
}
/**
  Initialize the memory required by the log table.
  @param client_type The type of this party:
  - ALICE (1)
  - BOB (2)
 */
void init_logTable(int client_type)
{
  mpz_t domain;
  mpz_init(domain);
  logtable=(mpz_t*)malloc(sizeof(mpz_t)*256);
  init_vector(logtable, 256);
  mpz_set_ui(domain, 4294967296);
  gen_table(logtable, domain, client_type);
  mpz_clear(domain);
  //printf("successfully init logtable\n");
}

/**
  Free the log table
 */
void free_logTable()
{
  clear_vector(logtable,256);
  free(logtable);
}

